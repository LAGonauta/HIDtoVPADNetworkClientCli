name: Release
on:
  push:
    tags:
    - 'v*'

jobs:
  build_win:
    name: Build for Windows
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        target:
          - i686-pc-windows-gnu
          - x86_64-pc-windows-gnu
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --target=${{ matrix.target }}

      - run: strip -s ${{ github.workspace }}/target/${{ matrix.target }}/release/network-client.exe
      - run: mv ${{ github.workspace }}/target/${{ matrix.target }}/release/network-client.exe ${{ github.workspace }}/target/${{ matrix.target }}/release/network-client-${{ matrix.target }}.exe

      - uses: actions/upload-artifact@master
        with:
          name: network-client-windows ${{ matrix.target }}
          path: ${{ github.workspace }}/target/${{ matrix.target }}/release/network-client-${{ matrix.target }}.exe

  build_linux:
    name: Build for Linux
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        target:
          - arm-unknown-linux-gnueabihf
          - aarch64-unknown-linux-gnu
          - x86_64-unknown-linux-gnu
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - run: sudo apt-get update

      # install dependencies

      - run: sudo docker build -t local/armhf-image:latest -f ${{ github.workspace }}/.github/scripts/Dockerfile_armhf .
        if: ${{ matrix.target == 'arm-unknown-linux-gnueabihf' }}

      - run: sudo docker build -t local/aarch64-image:latest -f ${{ github.workspace }}/.github/scripts/Dockerfile_aarch64 .
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}

      - run: sudo apt-get install -y libudev-dev
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}

      # install dependencies

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: arm-unknown-linux-gnueabihf
          override: true

      - uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.target != 'x86_64-unknown-linux-gnu' }}
          command: build
          args: --release --target=${{ matrix.target }}

      # strip binaries

      - run: sudo apt-get install --assume-yes binutils-arm-linux-gnueabihf
        if: ${{ matrix.target == 'arm-unknown-linux-gnueabihf' }}

      - run: /usr/bin/arm-linux-gnueabihf-strip -s ${{ github.workspace }}/target/${{ matrix.target }}/release/network-client
        if: ${{ matrix.target == 'arm-unknown-linux-gnueabihf' }}

      - run: sudo apt-get install --assume-yes binutils-aarch64-linux-gnu
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}

      - run: /usr/bin/aarch64-linux-gnu-strip -s ${{ github.workspace }}/target/${{ matrix.target }}/release/network-client
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}

      - run: strip -s ${{ github.workspace }}/target/${{ matrix.target }}/release/network-client
        if: ${{ matrix.target == 'x86_64-unknown-linux-gnu' }}

      # strip binaries

      - run: mv ${{ github.workspace }}/target/${{ matrix.target }}/release/network-client ${{ github.workspace }}/target/${{ matrix.target }}/release/network-client-${{ matrix.target }}

      - uses: actions/upload-artifact@master
        with:
          name: network-client-${{ matrix.target }}
          path: ${{ github.workspace }}/target/${{ matrix.target }}/release/network-client-${{ matrix.target }}

  generate_release:
    name: Generate the release with all files
    runs-on: ubuntu-latest
    needs: [build_linux, build_win]
    steps:

      - name: Download all artifacts
        uses: actions/download-artifact@v2

      - name: Display structure of downloaded files
        run: ls -R

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        id: upload-release-assets
        uses: dwenegar/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
          assets_path: .